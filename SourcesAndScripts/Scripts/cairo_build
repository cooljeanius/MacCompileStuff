#!/usr/bin/env bash
#
# cairo_build
# Martin HrubÃ½ (hrubymar10), 2018-2019
#

CAIRO_VERSION="1.16.0"

edit_dylib_deps() {
        DYLIB=$1
        DEPS=$(otool -L ${DYLIB} | awk '{print $1;}' | tail -n +2)

        for DEP in $DEPS; do
                DEP_BASE=$(basename ${DEP})
                if [ "$DEP_BASE" == "$(basename $DYLIB)" ]; then
                        continue
                fi
                # Is this our redistributable file?
                if [ -f $(dirname ${DYLIB})/${DEP_BASE} ]; then
                        install_name_tool -change "${DEP}" "@loader_path/${DEP_BASE}" ${DYLIB}
                fi
        done
}

time_interval_to_string() {
        local START=$1
        local END=$2

        declare -i timestamp
        declare -i days
        declare -i hours
        declare -i minutes
        declare -i seconds
        timestamp=$END-$START

        days=$timestamp/60/60/24
        hours=$((($timestamp-($days*60*60*24))/60/60))
        minutes=$((($timestamp-($days*60*60*24)-($hours*60*60))/60))
        seconds=$((($timestamp-($days*60*60*24)-($hours*60*60)-($minutes*60))))
        if [ $days -eq 0 ]; then
        if [ $hours -eq 0 ]; then
                if [ $minutes -eq 0 ]; then
                echo "==> Operation took $seconds seconds ..."
                else
                echo "==> Operation took $minutes minutes and $seconds seconds ..."
                fi
        else
                echo "==> Operation took $hours hours $minutes minutes and $seconds seconds ..."
        fi
        else
        echo "==> Operation took $days days $hours hours $minutes minutes and $seconds seconds ..."
        fi
}

starttimestamp=$(date +%s)

MY_PATH=$(cd `dirname $0` && pwd)
if [ -z "$MY_PATH" ] ; then
        # error; for some reason, the path is not accessible
        # to the script (e.g. permissions re-evaled after suid)
        echo 'Error: Script path is for some reason not accessible' >&2
        exit 1  # fail
fi
cd "$MY_PATH"/../Sources

if ! [ -x "$(command -v wget)" ]; then
        echo 'Error: wget is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
        exit 1
fi

if xcode-select --install 2>&1 | grep installed; then
        echo "==> Xcode Command Line Tools are installed..."
else
        echo "==> Xcode Command Line Tools aren't installed, installing..."
        xcode-select --install
fi

# TODO: use pixman from MacCompileStuff
if [ ! -f "/usr/local/lib/libpixman-1.0.dylib" ]; then
        echo 'Error: pixman is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
        exit 1
fi

# TODO: use fontconfig from MacCompileStuff
if ! [ -x "$(command -v fc-cache)" ]; then
        echo 'Error: fontconfig is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
        exit 1
fi

# TODO: use freetype from MacCompileStuff
if ! [ -x "$(command -v freetype-config)" ]; then
        echo 'Error: freetype is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
        exit 1
fi

# TODO: use libpng from MacCompileStuff
if ! [ -x "$(command -v libpng-config)" ]; then
        echo 'Error: libpng is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
        exit 1
fi

# TODO: use libffi from MacCompileStuff
if [ ! -f /usr/local/Cellar/libffi/*/lib/libffi.dylib ]; then
        echo 'Error: libffi is not installed or is not linked. Use Homebrew, install it and force link it. See https://brew.sh/' >&2
        exit 1
fi

# TODO: Verify checksum
rm -rf cairo-*
wget "https://cairographics.org/releases/cairo-$CAIRO_VERSION.tar.xz"
tar xf "cairo-$CAIRO_VERSION.tar.xz"
rm "cairo-$CAIRO_VERSION.tar.xz"
cd "cairo-$CAIRO_VERSION"
export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"
./configure --disable-dependency-tracking --enable-gobject=yes --enable-svg=yes --enable-tee=yes --enable-quartz-image --enable-xcb=no --enable-xlib=no --enable-xlib-xrender=no
make MACOSX_DEPLOYMENT_TARGET=10.8
mkdir "cairo-$CAIRO_VERSION-RELEASE"
cp "src/.libs/libcairo.2.dylib" "cairo-$CAIRO_VERSION-RELEASE/libcairo.2.dylib"
cd "cairo-$CAIRO_VERSION-RELEASE"
install_name_tool -id "@rpath/libcairo.2.dylib" "libcairo.2.dylib"
edit_dylib_deps libcairo.2.dylib
install_name_tool -change "/usr/local/opt/pixman/lib/libpixman-1.0.dylib" "@loader_path/libpixman-1.0.dylib" "libcairo.2.dylib"
install_name_tool -change "/usr/local/opt/fontconfig/lib/libfontconfig.1.dylib" "@loader_path/libfontconfig.1.dylib" "libcairo.2.dylib"
install_name_tool -change "/usr/local/opt/freetype/lib/libfreetype.6.dylib" "@loader_path/libfreetype.6.dylib" "libcairo.2.dylib"
install_name_tool -change "/usr/local/opt/libpng/lib/libpng16.16.dylib" "@loader_path/libpng16.16.dylib" "libcairo.2.dylib"
cd ..
rm -rf "$MY_PATH"/../../Headers/cairo
mkdir "$MY_PATH"/../../Headers/cairo
cp cairo-version.h "$MY_PATH"/../../Headers/cairo/
cp util/cairo-gobject/cairo-gobject.h "$MY_PATH"/../../Headers/cairo/
cp util/cairo-script/cairo-script-interpreter.h "$MY_PATH"/../../Headers/cairo/
cd src
cp cairo-deprecated.h cairo-features.h cairo-ft.h cairo-pdf.h cairo-ps.h cairo-script.h cairo-svg.h cairo-tee.h cairo-xcb.h cairo-xlib-xrender.h cairo-xlib.h cairo-xml.h cairo.h "$MY_PATH"/../../Headers/cairo/
cd "$MY_PATH"/../
rm -rf CompiledLibs/cairo-*
mv "Sources/cairo-$CAIRO_VERSION/cairo-$CAIRO_VERSION-RELEASE" "CompiledLibs/cairo-$CAIRO_VERSION-RELEASE"
rm -rf ../lib/libcairo.2.dylib
cp -rf "CompiledLibs/cairo-$CAIRO_VERSION-RELEASE/libcairo.2.dylib" "../lib/libcairo.2.dylib"
echo "==> DONE ..."
echo
time_interval_to_string "$starttimestamp" "$(date +%s)"
echo