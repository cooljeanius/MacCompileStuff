#!/usr/bin/env bash
#
# boost_build
# Martin HrubÃ½ (hrubymar10), 2018-2022
#

set -e

BOOST_VERSION_1="1.79.0"
BOOST_VERSION_2="1_79_0"
SHA256="475d589d51a7f8b3ba2ba4eda022b170e562ca3b760ee922c146b6c65856ef39"

starttimestamp=$(date +%s)

MY_PATH=$(cd `dirname ${0}` && pwd)
if [ -z "${MY_PATH}" ] ; then
  # error; for some reason, the path is not accessible
  # to the script (e.g. permissions re-evaled after suid)
  echo 'Error: Script path is for some reason not accessible' >&2
  exit 1  # fail
fi

source "${MY_PATH}/env"
source "${MY_PATH}/functions"

check_wget

if ! [ is_apple_silicon_mac ]; then
  echo "Error: Boost requires Apple Silicon mac to build universal libs" >&2
  exit 1
fi

cd "${SOURCES_PATH}"
rm -rf "boost"*
get_src_and_verify_checksum "boost_${BOOST_VERSION_2}.tar.bz2" "${SHA256}" "https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION_1}/source/boost_${BOOST_VERSION_2}.tar.bz2"
tar xf "${SOURCES_PATH}/archives/boost_${BOOST_VERSION_2}.tar.bz2" -C .
cp -R "boost_${BOOST_VERSION_2}" "boost_${BOOST_VERSION_2}-arm64"
ln -s "boost_${BOOST_VERSION_2}" "boost"
cd "boost"
# Build x86_64
rm -rf "stage"
source "${MY_PATH}/env"
arch -x86_64 ./bootstrap.sh --with-libraries=chrono,context,coroutine,filesystem,iostreams,locale,program_options,random,regex,system,timer,test,thread abi=sysv address-model=64 architecture=x86 binary-format=mach-o threading=multi toolset=clang
#./bootstrap.sh --with-libraries=chrono,context,coroutine,filesystem,iostreams,locale,program_options,random,regex,system,timer,test,thread abi=sysv address-model=64 architecture=x86 binary-format=mach-o threading=multi toolset=clang
export LDFLAGS="${LDFLAGS_X86_64}"
export CFLAGS="${CFLAGS_X86_64}"
export CXXFLAGS="${CXXFLAGS_X86_64}"
arch -x86_64 ./b2 -q cxxflags="${CXXFLAGS}" linkflags="${LDFLAGS}" --layout=tagged-1.66 link=shared variant=release -sNO_LZMA=1 -sNO_ZSTD=1 cxxstd=14 abi=sysv address-model=64 architecture=x86 binary-format=mach-o threading=multi toolset=clang
#./b2 -q cxxflags="${CXXFLAGS}" linkflags="${LDFLAGS}" --layout=tagged-1.66 link=shared variant=release -sNO_LZMA=1 -sNO_ZSTD=1 cxxstd=14 abi=sysv address-model=64 architecture=x86 binary-format=mach-o threading=multi toolset=clang
# Build arm64
cd "${SOURCES_PATH}/boost_${BOOST_VERSION_2}-arm64"
rm -rf "stage"
source "${MY_PATH}/env"
arch -arm64 ./bootstrap.sh --with-libraries=chrono,context,coroutine,filesystem,iostreams,locale,program_options,random,regex,system,timer,test,thread abi=aapcs address-model=64 architecture=arm binary-format=mach-o threading=multi toolset=clang
#./bootstrap.sh --with-libraries=chrono,context,coroutine,filesystem,iostreams,locale,program_options,random,regex,system,timer,test,thread abi=aapcs address-model=64 architecture=arm binary-format=mach-o threading=multi toolset=clang
export LDFLAGS="${LDFLAGS_ARM64}"
export CFLAGS="${CFLAGS_ARM64}"
export CXXFLAGS="${CXXFLAGS_ARM64}"
arch -arm64 ./b2 -q cxxflags="${CXXFLAGS}" linkflags="${LDFLAGS}" --layout=tagged-1.66 link=shared variant=release -sNO_LZMA=1 -sNO_ZSTD=1 cxxstd=14 abi=aapcs address-model=64 architecture=arm binary-format=mach-o threading=multi toolset=clang
#./b2 -q cxxflags="${CXXFLAGS}" linkflags="${LDFLAGS}" --layout=tagged-1.66 link=shared variant=release -sNO_LZMA=1 -sNO_ZSTD=1 cxxstd=14 abi=aapcs address-model=64 architecture=arm binary-format=mach-o threading=multi toolset=clang
cd "stage/lib"
mkdir "boost_${BOOST_VERSION_2}-RELEASE"
for filename in *.dylib ; do
  lipo -create "${SOURCES_PATH}/boost_${BOOST_VERSION_2}-arm64/stage/lib/${filename}" "${SOURCES_PATH}/boost_${BOOST_VERSION_2}/stage/lib/${filename}" -output "boost_${BOOST_VERSION_2}-RELEASE/${filename}"
done
cd "boost_${BOOST_VERSION_2}-RELEASE"
for filename in * ; do
  install_name_tool -id "@rpath/${filename}" "${filename}"
done
rm -rf "${LIBS_PATH}/libboost"*
cp -rf * "${LIBS_PATH}/"
rm -rf "${HEADERS_PATH}/boost"
cp -rf "${SOURCES_PATH}/boost/boost" "${HEADERS_PATH}/"
echo "==> DONE ..."
echo ""
time_interval_to_string "${starttimestamp}" "$(date +%s)"
echo ""
