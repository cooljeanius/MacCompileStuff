#!/usr/bin/env bash
#
# functions
# Martin HrubÃ½ (hrubymar10), 2018-2020
#

set -e

check_wget() {
  if ! [ -x "$(command -v wget)" ]; then
    echo 'Error: wget is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_xcode() {
  if xcode-select --install 2>&1 | grep installed; then
    echo "==> Xcode Command Line Tools are installed..."
  else
    echo "==> Xcode Command Line Tools aren't installed, installing..."
    xcode-select --install
  fi
}

# TODO: use pixman from MacCompileStuff
check_pixman() {
  if [ ! -f "/usr/local/lib/libpixman-1.0.dylib" ]; then
    echo 'Error: pixman is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use fontconfig from MacCompileStuff
check_fontconfig() {
  if ! [ -x "$(command -v fc-cache)" ]; then
    echo 'Error: fontconfig is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use freetype from MacCompileStuff
check_freetype() {
  if ! [ -x "$(command -v freetype-config)" ]; then
    echo 'Error: freetype is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use libpng from MacCompileStuff
check_libpng() {
  if ! [ -x "$(command -v libpng-config)" ]; then
    echo 'Error: libpng is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use libffi from MacCompileStuff
check_libffi() {
  if [ ! -f "/usr/local/Cellar/libffi/"*"/lib/libffi.dylib" ]; then
    echo 'Error: libffi is not installed or is not linked. Use Homebrew, install it and force link it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use glib from MacCompileStuff
check_glib() {
  if ! [ -x "$(command -v gobject-query)" ]; then
    echo 'Error: glib is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use gettext from MacCompileStuff
check_gettext() {
  if ! [ -x "$(command -v gettext)" ]; then
    echo 'Error: gettext is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use graphite2 from MacCompileStuff
check_graphite2() {
  if ! [ -x "$(command -v gr2fonttest)" ]; then
    echo 'Error: graphite2 is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use cairo from MacCompileStuff
check_cairo() {
  if ! [ -x "$(command -v cairo-sphinx)" ]; then
    echo 'Error: cairo is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use harfbuzz from MacCompileStuff
check_harfbuzz() {
  if ! [ -x "$(command -v hb-view)" ]; then
    echo 'Error: harfbuzz is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use fribidi from MacCompileStuff
check_fribidi() {
  if [ ! -f "/usr/local/opt/fribidi/lib/libfribidi.0.dylib" ]; then
    echo 'Error: fribidi is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use libogg from MacCompileStuff
check_libogg() {
  if [ ! -f "/usr/local/opt/libogg/lib/libogg.0.dylib" ]; then
    echo 'Error: libogg is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

# TODO: use pcre from MacCompileStuff
check_pcre() {
  if [ ! -f "/usr/local/opt/pcre/lib/libpcre.1.dylib" ]; then
    echo 'Error: pcre is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_meson() {
  if ! [ -x "$(command -v meson)" ]; then
    echo 'Error: meson is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_ninja() {
  if ! [ -x "$(command -v ninja)" ]; then
    echo 'Error: ninja is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_cmake() {
  if ! [ -x "$(command -v cmake)" ]; then
    echo 'Error: cmake is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

remove_rpath_if_exists() {
  DYLIB=$1
  PATH_TO_REMOVE=$2
  PATHS=$(otool -l "${DYLIB}" | grep "RPATH" -A2 | grep "path" | awk '{print $2;}')

  if [[ ${PATHS} == *"${PATH_TO_REMOVE}"* ]]; then
    ACTUAL_PATH=$(otool -l "${DYLIB}" | grep "RPATH" -A2 | grep "path" | awk '{print $2;}' | grep "${PATH_TO_REMOVE}")
    install_name_tool -delete_rpath "${ACTUAL_PATH}" ${DYLIB}
  fi
}

edit_dylib_deps() {
  DYLIB=$1
  DYLIB_DEPS=$(otool -L ${DYLIB} | awk '{print $1;}' | tail -n +2)
  MCS_DYLIBS_PATH="${MY_PATH}/../../lib"

  for DEP in ${DYLIB_DEPS}; do
    DEP_BASE=$(basename ${DEP})
    if [ "${DEP_BASE}" == "$(basename ${DYLIB})" ]; then
      continue
    fi
    # Is this our redistributable file?
    if [ -f $(dirname ${DYLIB})/${DEP_BASE} ]; then
      install_name_tool -change "${DEP}" "@loader_path/${DEP_BASE}" ${DYLIB}
    elif [ -f "${MCS_DYLIBS_PATH}/${DEP_BASE}" ]; then
      install_name_tool -change "${DEP}" "@loader_path/${DEP_BASE}" ${DYLIB}
    fi
  done
}

get_src_and_verify_checksum() {
  NAME=$1
  SHA256=$2
  URL=$3
  OUT_PATH="${SOURCES_PATH}/archives"

  mkdir -p "${OUT_PATH}"

  if [ -f "${OUT_PATH}/${NAME}" ]; then
    SHA256_TO_VERIFY=$(shasum -a 256 "${OUT_PATH}/${NAME}" | awk '{print $1;}')
    if [[ "${SHA256}" == "${SHA256_TO_VERIFY}" ]]; then
      echo "==> Local file ${NAME} with valid SHA256 already exists"
      return
    else
      echo "==> SHA256 of local file ${NAME} differs... Downloading again..."
      rm -rf "${OUT_PATH}/${NAME}"
    fi
  fi

  wget -O "${OUT_PATH}/${NAME}" "${URL}"
  SHA256_TO_VERIFY=$(shasum -a 256 "${OUT_PATH}/${NAME}" | awk '{print $1;}')
  if ! [[ "${SHA256}" == "${SHA256_TO_VERIFY}" ]]; then
    echo "==> SHA256 of local file ${NAME} differs... Exitting..." >&2
    echo "==> SHA256 = ${SHA256}" >&2
    echo "==> actual = ${SHA256_TO_VERIFY}" >&2
    exit 1
  fi
}

time_interval_to_string() {
  local START=$1
  local END=$2

  declare -i timestamp
  declare -i days
  declare -i hours
  declare -i minutes
  declare -i seconds
  timestamp=$END-$START

  days=$timestamp/60/60/24
  hours=$((($timestamp-($days*60*60*24))/60/60))
  minutes=$((($timestamp-($days*60*60*24)-($hours*60*60))/60))
  seconds=$((($timestamp-($days*60*60*24)-($hours*60*60)-($minutes*60))))
  if [ $days -eq 0 ]; then
    if [ $hours -eq 0 ]; then
      if [ $minutes -eq 0 ]; then
        echo "==> Operation took $seconds seconds ..."
      else
        echo "==> Operation took $minutes minutes and $seconds seconds ..."
      fi
    else
      echo "==> Operation took $hours hours $minutes minutes and $seconds seconds ..."
    fi
  else
    echo "==> Operation took $days days $hours hours $minutes minutes and $seconds seconds ..."
  fi
}
