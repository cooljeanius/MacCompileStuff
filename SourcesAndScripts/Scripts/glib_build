#!/usr/bin/env bash
#
# glib_build
# Martin HrubÃ½ (hrubymar10), 2018-2020
#

set -e

GLIB_VERSION="2.64.4"
GLIB_VERSION_SHORT="2.64"
SHA256="f7e0b325b272281f0462e0f7fff25a833820cac19911ff677251daf6d87bce50"

starttimestamp=$(date +%s)

MY_PATH=$(cd `dirname ${0}` && pwd)
if [ -z "${MY_PATH}" ] ; then
  # error; for some reason, the path is not accessible
  # to the script (e.g. permissions re-evaled after suid)
  echo 'Error: Script path is for some reason not accessible' >&2
  exit 1  # fail
fi

source "${MY_PATH}/env"
source "${MY_PATH}/functions"
unset MACOSX_DEPLOYMENT_TARGET

check_wget
check_xcode
check_meson
check_ninja
check_pcre
check_libffi
check_gettext

cd "${SOURCES_PATH}"
rm -rf "glib"*
get_src_and_verify_checksum "glib-${GLIB_VERSION}.tar.xz" "${SHA256}" "https://download.gnome.org/sources/glib/${GLIB_VERSION_SHORT}/glib-${GLIB_VERSION}.tar.xz"
tar xf "${SOURCES_PATH}/archives/glib-${GLIB_VERSION}.tar.xz" -C .
ln -s "glib-${GLIB_VERSION}" "glib"
cd "glib"
mkdir "build"
meson -Dbsymbolic_functions=false -Ddtrace=false -Diconv=auto --default-library=shared --buildtype=release . "build"
cd "build"
ninja
mkdir "glib-${GLIB_VERSION}-RELEASE"
cp "glib/libglib-2.0.0.dylib" "glib-${GLIB_VERSION}-RELEASE/libglib-2.0.0.dylib"
cp "gmodule/libgmodule-2.0.0.dylib" "glib-${GLIB_VERSION}-RELEASE/libgmodule-2.0.0.dylib"
cp "gobject/libgobject-2.0.0.dylib" "glib-${GLIB_VERSION}-RELEASE/libgobject-2.0.0.dylib"
cp "gthread/libgthread-2.0.0.dylib" "glib-${GLIB_VERSION}-RELEASE/libgthread-2.0.0.dylib"
cp "gio/libgio-2.0.0.dylib" "glib-${GLIB_VERSION}-RELEASE/libgio-2.0.0.dylib"
cd "glib-${GLIB_VERSION}-RELEASE"
# TODO: Use MCS' pcre, libffi and gettext
for filename in * ; do
  install_name_tool -id "@rpath/${filename}" "${filename}"
  edit_dylib_deps "${filename}"
  remove_rpath_if_exists "${filename}" "@loader_path/../glib"
  remove_rpath_if_exists "${filename}" "@loader_path/../gmodule"
  remove_rpath_if_exists "${filename}" "@loader_path/../gobject"
  remove_rpath_if_exists "${filename}" "/usr/local/Cellar/pcre/"
  remove_rpath_if_exists "${filename}" "/usr/local/Cellar/libffi/"
done
rm -rf "${LIBS_PATH}/libglib-2.0.0.dylib" "${LIBS_PATH}/libgmodule-2.0.0.dylib" "${LIBS_PATH}/libgobject-2.0.0.dylib" "${LIBS_PATH}/libgthread-2.0.0.dylib"
cp -rf * "${LIBS_PATH}/"
rm -rf "${HEADERS_PATH}/glib"*
mkdir -p "${HEADERS_PATH}/glib-2.0/gio"
mkdir -p "${HEADERS_PATH}/glib-2.0/glib/deprecated"
mkdir -p "${HEADERS_PATH}/glib-2.0/gobject"
# TODO: Use glib-public-headers.txt and etc for Headers
cp "${SOURCES_PATH}/glib/build/glib/glibconfig.h" "${HEADERS_PATH}/"
cp "${SOURCES_PATH}/glib/build/gobject/glib-enumtypes.h" "${HEADERS_PATH}/glib-2.0/gobject/glib-enumtypes.h"
cd "${SOURCES_PATH}/glib/glib"
cp "glib-object.h" "glib-unix.h" "glib.h" "${HEADERS_PATH}/glib-2.0/"
cp "${SOURCES_PATH}/glib/glib/"*.h "${HEADERS_PATH}/glib-2.0/glib/"
cp "${SOURCES_PATH}/glib/glib/deprecated/"*.h "${HEADERS_PATH}/glib-2.0/glib/deprecated/"
cp "${SOURCES_PATH}/glib/gio/"*.h "${HEADERS_PATH}/glib-2.0/gio/"
cp "${SOURCES_PATH}/glib/gmodule/gmodule.h" "${HEADERS_PATH}/glib-2.0/"
cp "${SOURCES_PATH}/glib/gobject/"*.h "${HEADERS_PATH}/glib-2.0/gobject/"
echo "==> DONE ..."
echo
time_interval_to_string "${starttimestamp}" "$(date +%s)"
echo